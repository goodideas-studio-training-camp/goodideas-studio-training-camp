import{_ as a,M as t,p,q as e,Q as n,t as o,N as c,a1 as l}from"./framework-2d24001b.js";const i={},u=l(`<h1 id="資料-immutable-觀念" tabindex="-1"><a class="header-anchor" href="#資料-immutable-觀念" aria-hidden="true">#</a> 資料 immutable 觀念</h1><h2 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h2><p>此篇文章主要是因為某天與同事 code review 時，被問到「若是這筆資料只侷限在這個 view 使用，那麼用 push 不是最簡單明瞭嗎？」 因此整理出關於在前端修改資料時，可能會遇到的 <strong>immutable</strong> 問題。當然以現代主流框架來說，會遇到如此複雜深層的資料改變導致畫面無發更新的問題少之又少，但還是拿出來討論一下～</p><p>若對於文章有任何疑問，歡迎提出討論～</p><h2 id="糟糕的範例" tabindex="-1"><a class="header-anchor" href="#糟糕的範例" aria-hidden="true">#</a> 糟糕的範例</h2><p><em>ScriptEditor 內的寫法(父層)</em></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in *stepDatas*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		&lt;component :is=&quot;item.component&quot; *:propsData=&quot;item&quot;*&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
export default </span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;*ScriptEditor*&quot;</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">stepDatas</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">methods</span><span class="token operator">:</span><span class="token punctuation">{</span>
		<span class="token function">addStepCard</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">switch</span><span class="token punctuation">(</span>val<span class="token punctuation">.</span>type<span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">case</span> <span class="token string">&#39;start&#39;</span><span class="token operator">:</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>stepDatas<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
					<span class="token literal-property property">nid</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stepDatas<span class="token punctuation">.</span>lenght<span class="token punctuation">,</span>
					<span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;scriptEditorStart&#39;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">type</span><span class="token operator">:</span> val<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
					<span class="token literal-property property">target_url</span><span class="token operator">:</span> val<span class="token punctuation">.</span>target_url
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
				<span class="token comment">// array 的最後一筆資料 的 id + 1</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>stepDatas<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>nid <span class="token operator">+=</span> <span class="token number">1</span>
			<span class="token punctuation">}</span>
				<span class="token keyword">case</span> <span class="token string">&#39;input&#39;</span><span class="token operator">:</span>
				<span class="token keyword">this</span><span class="token punctuation">.</span>stepDatas<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
					<span class="token literal-property property">nid</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stepDatas<span class="token punctuation">.</span>lenght <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
					<span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token string">&#39;scriptEditorInput&#39;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">type</span><span class="token operator">:</span> val<span class="token punctuation">.</span>type<span class="token punctuation">,</span>
					<span class="token literal-property property">target_url</span><span class="token operator">:</span> val<span class="token punctuation">.</span>target_url
				<span class="token punctuation">}</span><span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span><span class="token plain-text">
};
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><em>scriptEditorInput 內的寫法(子層)</em></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item in *stepDatas*<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>item.id<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
		&lt;component :is=&quot;item.component&quot; *:propsData=&quot;item&quot;*&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>component</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
	</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token plain-text">
export default </span><span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;scriptEditorInput&quot;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">props</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">&#39;*propsData*&#39;</span><span class="token punctuation">]</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
			<span class="token literal-property property">formDate</span><span class="token operator">:</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">prase</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propData<span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 不會被觸發</span>
    <span class="token function">formDate</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>newValue<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token plain-text">;
</span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最一開始的寫法是在該 component 的 data 寫一個預設的 stepData = [] (總之初始化一個空陣列)。</p><p>接著在 addScriptItem 時將每一筆資料用 <strong>push</strong> 的方式直接修改 stepData 因此 vue 的 virtual DOM 沒有更新， watch 也沒辦法監察到資料變動。</p><p>**如果用 push 的話在記憶體裡，還是同一個位置，**用解構賦值才會是真的改寫記憶體位置。</p><p>而使用 JSON.stringify + JSON.parse 這個方法會是利用深拷貝特性，更新後的資料指向新的記憶體位置。缺點是非常佔記憶體空間。</p><h2 id="immutable" tabindex="-1"><a class="header-anchor" href="#immutable" aria-hidden="true">#</a> immutable</h2><p>基礎型別，每宣告一次，就會建立一次新的記憶體，而陣列、物件等型別，則是修改該物件內的 property，該 property 會指向新的記憶體。</p><p>以下圖示： <img src="https://i.imgur.com/y9t5t8X.png" alt=""></p><p>這邊我們將 <code>user.age</code> 的 value 改成 19，就是從原本的記憶體位置從 <code>0xFF0400</code> 指向 <code>0xFF0408</code>。</p><p>對於記憶體來說，<code>user</code> 並沒有被改變，當然 watch 也偵測不到資料的改變。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Chris&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

user<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">19</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://i.imgur.com/4nN9EAo.png" alt=""></p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token keyword">let</span> user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Chris&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

user <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;Chris&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">19</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://i.imgur.com/QBThvJY.png" alt=""></p><p>如果將 <code>user</code> 整個重新賦值的方式，才會是直接修改該 Object 整個指向全新的記憶體。</p><hr><p>以 vue 官方角度來說(vue1 轉 vue2 時，就有針對這個問題優化過了)，使用 push method 是可以的做到「資料變動以改變畫面」，但是為了後續維護以及 debug 方便，還是會以 immutable 的方式去做會比較安全。</p><h2 id="資料來源" tabindex="-1"><a class="header-anchor" href="#資料來源" aria-hidden="true">#</a> 資料來源</h2>`,26),r={href:"https://ithelp.ithome.com.tw/articles/10269649",target:"_blank",rel:"noopener noreferrer"};function k(d,v){const s=t("ExternalLinkIcon");return p(),e("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[o("Vue.js 進階心法 - 用 watch 搭配服用 immutable"),c(s)])])])])}const b=a(i,[["render",k],["__file","20221003-immutable.html.vue"]]);export{b as default};
