import{_ as i,M as p,p as o,q as l,Q as n,t as s,N as t,a1 as e}from"./framework-2d24001b.js";const c={},u=e('<p>因為工作專案使用 monorepo 的關係，對於 shared component 有一些想法/作法，自己覺得不錯的分享出來。</p><p>有些 component 例如 Dialog、Modal 通常都會讓他出現在 SPA 所掛載的 DOM element 之後。 這些各大 UI component library 通常都幫你做好好了， 使用方式基本都是擺進去 page component 中，定義當作<strong>開關</strong>的變數，<code>v-model</code> 搞定。 但有些像是</p><ol><li>在等待某件事情完成之前、強制使用者不能繼續操作的 <code>loading mask</code></li><li>使用者操作 feedback 的 Snackbar</li></ol><p>這類元件可能是擺在 <code>App.vue</code> 等比較屬於上層的 component 裡，並把<strong>開關</strong>儲存在 <code>store</code> 裡， 利用 <code>store.action</code> 在程式碼任何角落使用。</p><p>但這類元件我希望他在專案間共用的時候不是太方便，因為得在 monorepo 底下各個 project 中都建立開關、都把元件擺進去。 我想讓這些東西使用上能更像一個 library、plugin。 最好使用的時候是可以簡單的 import、簡單的呼叫就好。</p><hr><h2 id="快速瀏覽作法" tabindex="-1"><a class="header-anchor" href="#快速瀏覽作法" aria-hidden="true">#</a> 快速瀏覽作法：</h2><p>對於 vue/vite 很熟的人可以快速瀏覽這裡：</p><ol><li>找個地方可以 import plugin</li><li>載入 plugin 時額外建立一個順序在 <code>div#app</code> 之後的 DOM element</li><li>建立一個包含上述兩種元件的 vm，掛載在剛剛建立的 DOM element</li><li>寫一個能夠提供操作介面的 composable function</li><li>使用時呼叫 composable function 取得可以操作開關的 method，操作。</li></ol><hr><h2 id="建立額外的-vm-當作-global-level-component" tabindex="-1"><a class="header-anchor" href="#建立額外的-vm-當作-global-level-component" aria-hidden="true">#</a> 建立額外的 vm 當作 Global Level Component</h2>',11),r={href:"https://vuejs.org/api/application.html#app-use",target:"_blank",rel:"noopener noreferrer"},d={href:"https://vuejs.org/guide/reusability/plugins.html#writing-a-plugin",target:"_blank",rel:"noopener noreferrer"},v=e(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">install</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Plugin code goes here</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>先確定目標：</p><ol><li>可以在任何角落簡單呼叫 loading mask</li><li>不要使用的時候得在各個專案建立特定的檔案</li></ol><p>我的想法是額外建立一個 vm，把相關邏輯都包裝在這個 vm，不要四散</p><p>開始寫：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// customPlugin.js</span>
<span class="token keyword">const</span> rootElementID <span class="token operator">=</span> <span class="token string">&#39;globalComponentRoot&#39;</span>
<span class="token keyword">let</span> <span class="token literal-property property">vm</span><span class="token operator">:</span> any

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// 確保不會建立多個</span>
  <span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  rootElement<span class="token punctuation">.</span>id <span class="token operator">=</span> rootElementID
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span>

  vm <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">install</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Plugin code goes here</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>這樣在 <code>main.js</code> 時就可以如此這般安裝</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>// main.js
import customPlugin from &#39;./customPlugin.js&#39;
app.use(customPlugin)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h2 id="loading-mask-snackbar-component-實作" tabindex="-1"><a class="header-anchor" href="#loading-mask-snackbar-component-實作" aria-hidden="true">#</a> Loading mask / Snackbar component 實作</h2><p>再來處理這個額外的 vm 裡面的邏輯</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// customPlugin.js</span>
<span class="token keyword">const</span> rootElementID <span class="token operator">=</span> <span class="token string">&#39;globalComponentRoot&#39;</span>
<span class="token keyword">let</span> vm

<span class="token comment">// loading mask 只需要一個簡單的開關</span>
<span class="token keyword">const</span> showLoading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> <span class="token function-variable function">on</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> showLoading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">true</span>
<span class="token keyword">const</span> <span class="token function-variable function">off</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> showLoading<span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token comment">// snackbar 想要做成“出現後過幾秒自己消失”</span>
<span class="token keyword">const</span> ms <span class="token operator">=</span> <span class="token number">5000</span>
<span class="token keyword">const</span> snackbarStack <span class="token operator">=</span> <span class="token function">reactive</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">function</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token parameter"><span class="token literal-property property">message</span><span class="token operator">:</span> string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token function">h</span><span class="token punctuation">(</span>
    <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">// 在 vue build-in component - &lt;TransitionGroup&gt; 底下需要給 unique key 才可以正確地運作</span>
    <span class="token punctuation">{</span> <span class="token literal-property property">key</span><span class="token operator">:</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token keyword">class</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    message
  <span class="token punctuation">)</span>

  <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> snackbarStack<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ms<span class="token punctuation">)</span>
  snackbarStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">createVM</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>vm<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token comment">// 確保不會建立多個</span>
  <span class="token keyword">const</span> rootElement <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;div&#39;</span><span class="token punctuation">)</span>
  rootElement<span class="token punctuation">.</span>id <span class="token operator">=</span> rootElementID
  document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span>

  <span class="token keyword">const</span> rootComponent <span class="token operator">=</span> <span class="token function">defineComponent</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> rootElementID<span class="token punctuation">,</span>
    <span class="token function">setup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">{</span> <span class="token comment">// 得 return render 出來的 Vnode 才可以拿到並使用</span>
        showLoading<span class="token punctuation">,</span>
        snackbarStack<span class="token punctuation">,</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 因為不想另外再開 SFC 檔案，直接用 render function 寫</span>
    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token punctuation">[</span>
        <span class="token function">h</span><span class="token punctuation">(</span>
          Transition<span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">enterActiveClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">leaveActiveClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">enterFromClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">leaveToClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>showLoading <span class="token operator">?</span> <span class="token function">h</span><span class="token punctuation">(</span>LoadingContent<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token function">h</span><span class="token punctuation">(</span>
          TransitionGroup<span class="token punctuation">,</span>
          <span class="token punctuation">{</span>
            <span class="token literal-property property">tag</span><span class="token operator">:</span> <span class="token string">&#39;div&#39;</span><span class="token punctuation">,</span> <span class="token comment">// TransitionGroup default 會被渲染為 template</span>
            <span class="token keyword">class</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">moveClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">enterActiveClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">leaveActiveClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">enterFromClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">leaveToClass</span><span class="token operator">:</span> <span class="token string">&#39;...&#39;</span><span class="token punctuation">,</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> snackbarStack
        <span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>

  vm <span class="token operator">=</span> <span class="token function">createApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">mount</span><span class="token punctuation">(</span>rootElement<span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token function-variable function">install</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">app<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// Plugin code goes here</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 提供介面的 composable function</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useLoading</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    on<span class="token punctuation">,</span>
    off<span class="token punctuation">,</span>
    <span class="token function-variable function">isOn</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> showLoading<span class="token punctuation">.</span>value<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">useSnackbar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">{</span>
    push<span class="token punctuation">,</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="highlight-lines"><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><br><br><br><br><br><br><br><br><br><br><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div><div class="highlight-line"> </div></div><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12),k={class:"custom-container tip"},h=n("p",{class:"custom-container-title"},"TIP",-1),m=n("p",null,"L151, L164 是 function 還是已經建立好的 Vnode 其實不太要緊，這邊的使用情境，元件是 Global 的，使用頻率會很高。",-1),g=n("p",null,"不是 function 的話會有這句警告",-1),b=n("p",null,[n("code",null,"Non-function value encountered for default slot. Prefer function slots for better performance.")],-1),f={href:"https://stackoverflow.com/questions/69875273/non-function-value-encountered-for-default-slot-in-vue-3-composition-api-comp",target:"_blank",rel:"noopener noreferrer"};function y(w,_){const a=p("ExternalLinkIcon");return o(),l("div",null,[u,n("p",null,[s("vue3 提供了可以安裝 plugin 的"),n("a",r,[s("接口"),t(a)]),s(" 這裡很適合去建立額外的 DOM element。")]),n("p",null,[s("plugin 有一定的"),n("a",d,[s("起手式"),t(a)])]),v,n("div",k,[h,m,g,b,n("p",null,[s("詳細請看 "),n("a",f,[s("Stackoverflow"),t(a)])])])])}const C=i(c,[["render",y],["__file","20230212-globalLevelComponent.html.vue"]]);export{C as default};
